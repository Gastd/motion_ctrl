teb_local_planner: 

  ######### Robot Configuration Parameters #########  
  max_vel_x: 1.2 #0.4       #Maximum translational velocity of the robot in meters/sec
  max_vel_x_backwards: 1.2 #0.01  #  #Maximum absolute translational velocity of the robot while 
                            #   driving backwards in meters/sec. See optimization parameter 
                            #   weight_kinematics_forward_drive
  max_vel_theta: 0.8        #Maximum angular velocity of the robot in radians/sec
  acc_lim_x: 0.25           #Maximum translational acceleration of the robot in meters/sec^2
  acc_lim_theta: 0.25        #Maximum angular acceleration of the robot in radians/sec^2


  #REMEMBER TO USE CONTROL THE CENTRIPIT ACELERATION = V*theta_dot < 0.8

  #### The following parameters are relevant only for carlike robots ####
  min_turning_radius: 0.4         #Minimum turning radius of a carlike robot 
                                  #   (set to zero for a diff-drive robot).
  wheelbase: 1.44                 #The distance between the rear axle and the front axle. 
                                  #   The value might be negative for back-wheeled robots 
                                  #   (only required if ~<name>/cmd_angle_instead_rotvelis 
                                  #   set to true).
  cmd_angle_instead_rotvel: false #Substitute the rotational velocity in the commanded 
                                  #   velocity message by the corresponding steering angle 
                                  #   [-pi/2,pi/2]. Note, changing the semantics of yaw rate 
                                  #   depending on the application is not preferable. Here, 
                                  #   it just complies with the inputs required by the stage 
                                  #   simulator. Datatypes in ackermann_msgs are more 
                                  #   appropriate, but are not supported by move_base. 
                                  #   The local planner is not intended to send commands 
                                  #   by itself.


  ### The following parameters are relevant only for holonomic robots: New in ROS kinetic #Note, reduce ~<name>/weight_kinematics_nh significantly in order to adjust the tradeoff between usual driving and strafing.
  max_vel_y: 0.0 #Maximum strafing velocity of the robot (should be zero for 
                 #   non-holonomic robots!)
  acc_lim_y: 0.0 #Maximum strafing acceleration of the robot

  ### The following parameters are relevant for the footprint model used for optimization (see Tutorial Obstacle Avoidance and Robot Footprint Model).
  #footprint_model/type: "polygon"                       #Specify the robot footprint model 
                                                        #   type used for optimization. 
                                                        #   Different types are "point", 
                                                        #   "circular", "line", "two_circles" 
                                                        #   and "polygon." The type of the 
                                                        #   model significantly influences 
                                                        #   the required computation time.


  # Empty Rhino footprint
  #footprint_model/vertices: [[2.1, -0.3], [2.1, 0.3], [1.25, 0.54], [1, 0.54], [1, 0.38], [-0.2, 0.27], [-0.2, -0.27], [1, -0.38], [1.5, -0.49], [1.7, -0.49], [1.7, -0.3]]
  # Loaded Rhino footprint
  #footprint_model/vertices: [[2.1, -0.3],[2.1, 0.3],[1.6, 0.3],[1.6, 0.38],[1.30, 0.38],[1.25, 0.54],[1.15, 0.54],[1.15, 0.6],[-0.2, 0.6],[-0.2, -0.6],[1.15, -0.6],[1.5, -0.49],[1.7, -0.49],[1.7, -0.3]]


  footprint_model/type: "line" 
  footprint_model/line_start: [0.4, 0.0]               #This parameter is only relevant for 
                                                        #   type "line". It contains the start 
                                                        #   coordinates of the line segment.
  footprint_model/line_end: [1.5, 0.0]                  #This parameter is only relevant for 
                                                        #   type "line". It contains the end 
                                                        #   coordinates of the line segment.


  is_footprint_dynamic: false       #If true, updated the footprint before checking trajectory feasibility



  ######### Goal Tolerance Parameters #########
  xy_goal_tolerance: 0.1        #Allowed final euclidean distance to the goal position in meters
  yaw_goal_tolerance: 0.1       #Allowed final orientation error in radians
  free_goal_vel: false           #Remove the goal velocity constraint such that the robot can 
                                 #   arrive at the goal with maximum speed
  complete_global_plan: true     #true prevents the robot from ending the path early when it cross the end goal

  ######### Trajectory Configuration #########
  teb_autosize: true                              #Enable the automatic resizing of the trajectory during optimization 
                                                  #   (based on the temporal resolution of the trajectory, recommended)
  dt_ref: 0.1                                     #Desired temporal resolution of the trajectory 
                                                  #   (the trajectory is not fixed to dt_ref since 
                                                  #   the temporal resolution is part of the 
                                                  #   optimization, but the trajectory will be 
                                                  #   resized between iterations if 
                                                  #   dt_ref +-dt_hysteresis is violated.
  dt_hysteresis: 0.01                             #Hysteresis for automatic resizing depending 
                                                  #   on the current temporal resolution, usually 
                                                  #   approx. 10% of dt_ref is recommended
  min_samples: 3                                  #Minimum number of samples (should be always 
                                                  #   greater than 2)

  max_samples: 100
  global_plan_overwrite_orientation: false         #Overwrite orientation of local subgoals provided 
                                                  #   by the global planner (since they often 
                                                  #   provide only a 2D path)
  allow_init_with_backwards_motion: true          #If true, underlying trajectories might be initialized 
                                                  #   with backwards motions in case the goal is behind the 
                                                  #   start within the local costmap (this is only recommended 
                                                  #   if the robot is equipped with rear sensors).
  max_global_plan_lookahead_dist: 0.0             #Specify the maximum length (cumulative Euclidean 
                                                  #   distances) of the subset of the global plan 
                                                  #   taken into account for optimization. The 
                                                  #   actual length is than determined by the 
                                                  #   logical conjunction of the local costmap size 
                                                  #   and this maximum bound. Set to zero or negative 
                                                  #   in order to deactivate this limitation. New in 
                                                  #   version 0.3
  global_plan_prune_distance: 1                   #Distance between robot and via_points of global 
                                                  #   plan which is used for pruning
  exact_arc_length: false                         # If true, the planner uses the exact arc length in velocity, 
                                                  #   acceleration and turning rate computations [-> increased cpu time], 
                                                  #   otherwise the euclidean approximation is used.
  force_reinit_new_goal_dist: 0.05                #Reinitialize the trajectory if a previous goal 
                                                  #   is updated with a separation of more than the 
                                                  #   specified value in meters (skip hot-starting)
  feasibility_check_no_poses: 4                   #Specify up to which pose on the predicted plan 
                                                  #   the feasibility should be checked each sampling 
                                                  #   interval.
  publish_feedback: false                         #Publish planner feedback containing the full 
                                                  #   trajectory and a list of active obstacles 
                                                  #   (should be enabled only for evaluation or 
                                                  #   debugging). See list of publishers above.
  min_resolution_collision_check_angular: 3.1415  #Min angular resolution used during the costmap collision check. 
                                                  #   If not respected, intermediate samples are added. [rad]
  control_look_ahead_poses: 3                     #Index of the pose used to extract the velocity command
                                                  #   (50%) in case of automatically detected issues.


  ######### ViaPoints Parameters #########
  global_plan_viapoint_sep: -0.1          #-0.1 = disabled // If positive, via-points 
                                          #   are extrected from the global plan 
                                          #   (path-following mode). The value determines 
                                          #   the resolution of the reference path (min. 
                                          #   separation between each two consecutive 
                                          #   via-points along the global plan, 
                                          #   if negative: disabled). Refer to parameter 
                                          #   weight_via_point for adjusting the intensity. 
                                          #   New in version 0.4
  via_points_ordered: true               #If true, the planner adheres to the order of 
                                          #   via-points in the storage container

  ######### Obstacle Parameters #########
  min_obstacle_dist: 0.8                   #Minimum desired separation from obstacles in meters
  inflation_dist: 1.0                       #default: pre kinetic: 0.0, kinetic+: 0.6 // 
                                            #   Buffer zone around obstacles with non-zero 
                                            #   penalty costs (should be larger than 
                                            #   min_obstacle_dist in order to take effect). 
                                            #   Also refer to the weight weight_inflation.
  dynamic_obstacle_inflation_dist: 1.0      #Buffer zone around predicted locations of dynamic obstacles with non-zero 
                                            #   penalty costs (should be larger than 
                                            #   min_obstacle_dist in order to take effect)
  include_dynamic_obstacles: true           #Specify whether the movement of dynamic obstacles should 
                                            #   be predicted by a constant velocity model (this also effects homotopy class planning); 
                                            #   If false, all obstacles are considered to be static.        
  include_costmap_obstacles: true           #Specify if obstacles of the local costmap should 
                                            #   be taken into account. Each cell that is marked 
                                            #   as obstacle is considered as a point-obstacle. 
                                            #   Therefore do not choose a very small resolution 
                                            #   of the costmap since it increases computation time. In future releases this circumstance is going to be addressed as well as providing an additional api for dynamic obstacles.
  costmap_obstacles_behind_robot_dist: 2.0  #Limit the occupied local costmap obstacles taken 
                                            #   into account for planning behind the robot 
                                            #   (specify distance in meters). New in version 0.3
  obstacle_poses_affected: 20               #Each obstacle position is attached to the closest 
                                            #   pose on the trajectory in order to keep a 
                                            #   distance. Additional neighbors can be taken 
                                            #   into account as well.
  legacy_obstacle_association: false        #If true, the old association strategy is used (for each obstacle, find the nearest TEB pose), 
                                            #   otherwise the new one (for each teb pose, find only "relevant" obstacles).
  obstacle_association_force_inclusion_factor: 1.5 #The non-legacy obstacle association strategy tries to 
                                                 #connect only relevant obstacles with the discretized 
                                                 #trajectory during optimization. But all obstacles within 
                                                 #a specifed distance are forced to be included (as a multiple 
                                                 #of min_obstacle_dist). E.g. choose 2.0 in order toenforce the 
                                                 #consideration obstacles within a radius of 2.0*min_obstacle_dist. 
                                                 #[This parameter is used only if parameter legacy_obstacle_association is false]

  obstacle_association_cutoff_factor: 5.0        #See obstacle_association_force_inclusion_factor, but beyond a multiple 
                                                 #of [value]*min_obstacle_dist all obstacles are ignored during optimization. 
                                                 #Parameter obstacle_association_force_inclusion_factor is processed first. 
                                                 #[This parameter is used only if parameter legacy_obstacle_association is false]        

  #### The following parameters are relevant only if costmap_converter plugins are desired (see tutorial):
  # costmap_converter_plugin: ""        #Define plugin name in order to convert costmap 
                                        #   cells to points/lines/polygons. Set an empty 
                                        #   string to disable the conversion such that all 
                                        #   cells are treated as point-obstacles.
  # costmap_converter_spin_thread: true #If true, the costmap converter invokes its callback queue in a different thread
  # costmap_converter_rate: 5           #The rate that defines how often the costmap_converter plugin processes the current costmap 
                                      #   (the value should not be much higher than the costmap update rate)

  ######### Optimization Parameters #########
  no_inner_iterations: 5                #Number of actual solver iterations called in each 
                                        #   outerloop iteration. See param no_outer_iterations.
  no_outer_iterations: 4                #Each outerloop iteration automatically resizes the 
                                        #   trajectory according to the desired temporal 
                                        #   resolution dt_ref and invokes the internal 
                                        #   optimizer (that performs no_inner_iterations). 
                                        #   The total number of solver iterations in each 
                                        #   planning cycle is therefore the product of both 
                                        #   values.
  optimization_activate: true           #Activate the optimization
  optimization_verbose: false            #Print verbose information
  penalty_epsilon: 0.05                  #Add a small safety margin to penalty functions for 
                                        #   hard-constraint approximations

  weight_max_vel_x: 2.0                 #Optimization weight for satisfying the maximum 
                                        #   allowed translational velocity
  weight_max_vel_theta: 1.0             #Optimization weight for satisfying the maximum 
                                        #   allowed angular velocity
  weight_acc_lim_x: 1.0                 #Optimization weight for satisfying the maximum 
                                        #   allowed translational acceleration
  weight_acc_lim_theta: 1.0             #Optimization weight for satisfying the maximum 
                                        #   allowed angular acceleration
  weight_kinematics_nh: 1000.0          #Optimization weight for satisfying the non-holonomic 
                                        #   kinematics (this parameter must be high since the 
                                        #   kinematics equation constitutes an equality 
                                        #   constraint, even a value of 1000 does not imply 
                                        #   a bad matrix condition due to small 'raw' cost 
                                        #   values in comparison to other costs).
  weight_kinematics_forward_drive: 1.0 #100.0  #Optimization weight for forcing the robot to choose 
                                        #   only forward directions (positive transl. 
                                        #   velocities). A small weight (e.g. 1.0) still 
                                        #   allows driving backwards.
  weight_kinematics_turning_radius: 20.0 #Optimization weight for enforcing a minimum turning 
                                        #   radius (only for carlike robots).
  weight_optimaltime: 10.0               #Optimization weight for contracting the trajectory 
                                        #   w.r.t transition/execution time
  weight_shortest_path: 0.0             #Optimization weight for contracting the trajectory 
                                        #   w.r.t. path length
  weight_obstacle: 50.0                 #Optimization weight for keeping a minimum distance 
                                        #   from obstacles
  weight_viapoint: 10.0                  #Optimization weight for minimzing the distance 
                                        #   to via-points (resp. reference path). New in 
                                        #   version 0.4
  weight_inflation: 0.2                 #Optimization weight for the inflation penalty 
                                        #   (should be small).
  weight_dynamic_obstacle: 50           #Optimization weight for satisfying a minimum separation from dynamic obstacles
  weight_dynamic_obstacle_inflation: 0.1 #Optimization weight for the inflation penalty of dynamic obstacles (should be small)
  weight_prefer_rotdir: 50              #Optimization weight for preferring a specific turning direction 
                                        #   (-> currently only activated if an oscillation is detected, see 'oscillation_recovery'
  weight_adapt_factor: 2.0              #Some special weights (currently 'weight_obstacle') are repeatedly scaled by this factor 
                                        #   in each outer TEB iteration (weight_new = weight_old*factor); 
                                        #   Increasing weights iteratively instead of setting a huge value 
                                        #   a-priori leads to better numerical conditions of the underlying optimization problem.
  obstacle_cost_exponent: 1.0           #Exponent for nonlinear obstacle cost (cost = linear_cost * obstacle_cost_exponent). Set to 1 to disable nonlinear cost (default)


  ######### Homotopy Class Planner Parameters ######### 
  enable_homotopy_class_planning:  false                # (bool, default: false) Activate parallel planning in 
                                                        #   distinctive topologies 
                                                        #   (requires much more CPU resources, 
                                                        #   since multiple trajectories are 
                                                        #   optimized at once)
  enable_multithreading: true                           #Activate multiple threading in order to 
                                                        #   plan each trajectory in a different 
                                                        #   thread
  simple_exploration: false                             #If true, distinctive trajectories are explored using a 
                                                        #   simple left-right approach 
                                                        #   (pass each obstacle on the left or right side) 
                                                        #   for path generation, otherwise sample possible 
                                                        #   roadmaps randomly in a specified region between start and goal.
  max_number_classes: 2                                 #Specify the maximum number of distinctive
                                                        #   trajectories taken into account 
                                                        #   (limits computational effort)

  selection_cost_hysteresis: 0.9                        #Specify how much trajectory cost must 
                                                        #   a new candidate have w.r.t. a 
                                                        #   previously selected trajectory 
                                                        #   in order to be selected (selection 
                                                        #   if new_cost < old_cost*factor).
  selection_prefer_initial_plan: 0.95                   #Specify a cost reduction in the interval (0,1) for the 
                                                        #   trajectory in the equivalence class of the initial plan.
  selection_obst_cost_scale: 100.0                      #Extra scaling of obstacle cost terms 
                                                        #   just for selecting the 'best' 
                                                        #   candidate.
  selection_viapoint_cost_scale: 1.0                    #Extra scaling of via-point cost terms 
                                                        #   just for selecting the 'best' 
                                                        #   candidate. New in version 0.4
  selection_alternative_time_cost: false                #If true, time cost (sum of squared 
                                                        #   time differences) is replaced by 
                                                        #   the total transition time (sum of 
                                                        #   time differences).
  switching_blocking_period: 0.0                        #Specify a time duration in seconds that needs to be expired 
                                                        #   before a switch to new equivalence class is allowed
  roadmap_graph_no_samples: 15                          #Specify the number of samples generated 
                                                        #   for creating the roadmap graph
  roadmap_graph_area_length_scale: 1.0                  #The length of the rectangular region is determined by the distance between start and goal. 
                                                        #   This parameter further scales the distance such that the geometric center remains equal!
  roadmap_graph_area_width: 6                           #Random keypoints/waypoints are sampled 
                                                        #   in a rectangular region between start and goal. Specify the width of that region in meters.
  h_signature_prescaler: 0.4                            #Scale internal parameter (H-signature) 
                                                        #   that is used to distinguish between 
                                                        #   homotopy classes. Warning: reduce 
                                                        #   this parameter only, if you observe 
                                                        #   problems with too many obstacles in 
                                                        #   the local cost map, do not choose it 
                                                        #   extremly low, otherwise obstacles 
                                                        #   cannot be distinguished from each 
                                                        #   other (0.2<value<=1).
  h_signature_threshold: 0.1                            #Two H-signatures are assumed to be equal, 
                                                        #   if both the difference of real parts 
                                                        #   and complex parts are below the 
                                                        #   specified threshold.
  obstacle_keypoint_offset: 0.1                         #If simple_exploration is turned on, this parameter determines the distance on the left 
                                                        #   and right side of the obstacle at which a new keypoint will be cretead (in addition to min_obstacle_dist).
  obstacle_heading_threshold: 1.0                       #Specify the value of the scalar product 
                                                        #   between obstacle heading and goal 
                                                        #   heading in order to take them 
                                                        #   (obstacles) into account for 
                                                        #   exploration.
  visualize_hc_graph: false                             #Visualize the graph that is created 
                                                        #   for exploring distinctive 
                                                        #   trajectories (check marker message 
                                                        #   in rviz)
  viapoints_all_candidates: true                        #If true, all trajectories of different 
                                                        #   topologies are attached to the set 
                                                        #   of via-points, otherwise only the 
                                                        #   trajectory sharing the same topology 
                                                        #   as the initial/global plan is connected 
                                                        #   with them (no effect on test_optim_node). 
                                                        #   New in version 0.4
  visualize_with_time_as_z_axis_scale: 0.0              #If this value is bigger than 0, the trajectory and obstacles are visualized in 
                                                        #   3d using the time as the z-axis scaled by this value. Most useful for dynamic obstacles.
  delete_detours_backwards: true                        #If enabled, the planner will discard the plans detouring backwards with respect to the best plan
  detours_orientation_tolerance: 1.57                   #A plan is considered a detour if its start orientation differs more than this from the best plan
  length_start_orientation_vector: 0.4                  #Length of the vector used to compute the start orientation of a plan
  max_ratio_detours_duration_best_duration: 3.0         #Detours are discarted if their execution time / the execution time of the best teb is > this

  ######### Recovery Parameters #########
  shrink_horizon_backup: true                     #Allows the planner to shrink the horizon temporary 
  shrink_horizon_min_duration: 10                 #Specify minimum duration for the reduced horizon in case an infeasible trajectory is detected.
  oscillation_recovery: true                      #Try to detect and resolve oscillations between multiple solutions in the same equivalence class 
                                                  #   (robot frequently switches between left/right/forward/backwards)
  oscillation_v_eps: 0.1                          #Threshold for the average normalized linear velocity: if oscillation_v_eps and oscillation_omega_eps are not exceeded both, a possible oscillation is detected
  oscillation_omega_eps: 0.1                      #Threshold for the average normalized angular velocity: if oscillation_v_eps and oscillation_omega_eps are not exceeded both, a possible oscillation is detected
  oscillation_recovery_min_duration: 10           #Minumum duration [sec] for which the recovery mode is activated after an oscillation is detected.
  oscillation_filter_duration: 10                 #Filter length/duration [sec] for the detection of oscillations


  ######### Miscellaneous Parameters #########
  odom_topic: "odom"  #Topic name of the odometry message, provided by 
                      #   the robot driver or simulator.
  map_frame: "map"   #Global planning frame (in case of a static map, 
                      #   this parameter must be usually changed to "/map".
